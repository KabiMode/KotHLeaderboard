<head>
    <link rel="stylesheet" type="text/css" href="/content/style.css">
    <style media="screen">
    #wrapper{
        display:inline-block;
        width: 90%;
        min-width: 700px;
        max-width: 1300px;
        text-align: left;
        /*pixel outline*/
        border-width: 42px;
        border-style: groove;
        border-color: #EACC50;
        border-radius: 42px;
        -webkit-border-image: url(/content/KotHBorderBackFull.png) 84 stretch; /* Safari 3.1-5 */
        -o-border-image: url(/content/KotHBorderBackFull.png) 84 stretch; /* Opera 11-12.1 */
        border-image: url(/content/KotHBorderBackFull.png) 84 stretch;
        background-color:#7C5620;
        background-clip: padding-box;
        z-index: 2;
        position: relative;
    }
    #list-wrapper {
        margin: 24px 0px;
    }
    .tier{
        margin: 3px 0px;
    }
    .tier > div:nth-child(1){
        width: 100px;
        height: 100px;
        display: inline-block;
        position: relative;
        float: left;
        margin: 0px 0px 0px 0px;
        box-sizing: border-box;
        font-size: 60px;
        text-shadow: 0 4px black;
        text-align: center;
        vertical-align: middle;
        border: #404040 outset;
        border-width: 3px 0px 3px 3px;
        border-radius: 20px 0px 0px 20px;
                -moz-user-select: none; /* Firefox */
         -ms-user-select: none; /* Internet Explorer */
        -khtml-user-select: none; /* KHTML browsers (e.g. Konqueror) */
        -webkit-user-select: none; /* Chrome, Safari, and Opera */
        -webkit-touch-callout: none; /* Disable Android and iOS callouts*/
    }

    .tier > div:nth-child(1) span{
        position: absolute;
        display: block;
        top: 50%;
        transform: translateY(-50%);
        width: 100%;
        -webkit-text-stroke: 2px black;
    }
    .tier-zone{ /* .tier > div:nth-child(2) */
        box-sizing: border-box;
        min-height: 140px;
        padding: 10px;
        background-color: #696969;
        vertical-align: middle;
        border-radius: 0px 20px 20px 20px;
        margin-left: 97px;
        border: #404040 outset;
        border-width: 3px;
    }
    .character{
        display: inline-block;
        height: 100px;
        position: relative;
        overflow: hidden;
    }
    .character img{
        display: inline-block;
        height: 100%;
        pointer-events: none;
    }
    .character.hovered::before, .character.unhovered::after{
        content:"";
        display: inline-block;
        height: 80%;
        margin: 10% 3px;
        border: #218DC6 solid 2px;
        border-radius: 2px;
        box-sizing: border-box;
        width: 2px;
    }
    .character.hidden img{
        display: none;
    }
    .tier-zone.hovered::before{
        content: "";
         display: inline-block;
         height: 91px;
         margin: 14px 3px;
         border: #218DC6 solid 2px;
         border-radius: 2px;
         box-sizing: border-box;
         width: 2px;
         position: absolute;
   }
    #footer {
        margin-top: 10px
    }
    </style><!--
    <meta content='/content/portraits/Portrait_Zoe.png' property='og:image'> {{metacode}}
    <meta content='/tier/{{metacode}}' property='og:image'> {{metacode}} -->
    <meta content='/tier/{{metacode}}' property='og:image'>
    <meta name="theme-color" content="#EACC50">
    <link type="application/json+oembed" href="{{host}}/content/tieroembed.json" />
</head>
<div id="major-wrapper">
    <div id="header" class="extra">
        <h1>Tier List</h1>
    </div>
    <div id="wrapper">
        <div id="list-wrapper">
            <div class="tier">
                <div style="background-color:#FF7F7F;"><span>S</span></div><div id="S" class="tier-zone"></div> <!--<div class="character" id="Zoe" title="Zoe" draggable="true"><img src="/content/portraits/Portrait_Zoe.png" alt="Zoe"></div>-->
            </div>
            <div class="tier">
                <div style="background-color:#FFBF7F;"><span>A</span></div><div id="A" class="tier-zone"></div>
            </div>
            <div class="tier">
                <div style="background-color:#FFDF7F;"><span>B</span></div><div id="B" class="tier-zone"></div>
            </div>
            <div class="tier">
                <div style="background-color:#FFFF7F;"><span>C</span></div><div id="C" class="tier-zone"></div>
            </div>
            <div class="tier">
                <div style="background-color:#BFFF7F;"><span>D</span></div><div id="D" class="tier-zone"></div>
            </div>
            <div class="tier">
                <div style="background-color:#7FFF7F;"><span>E</span></div><div id="E" class="tier-zone"></div>
            </div>
        </div>
    </div>
    <div id="footer" class="extra">
        <h1>This page was created by Kabi (@Kabi in the discord, <a target="_blank" href="https://www.twitch.tv/kabimode">@kabimode</a> elsewhere)</h1>
    </div>
</div>
<img src="/tier/{{metacode}}" alt="">

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="/content/characters.js"></script>
<!--<script src="/content/processing.js"></script>-->
<script src="/content/parse-meta.js"></script>
<!--<script src="/node_modules/html2canvas/dist/html2canvas.min.js"></script>-->
<script type="text/javascript">

function updateMeta() {
    var newMeta = {"S":[],"A":[],"B":[],"C":[],"D":[],"E":[]}
    var tiers = document.getElementsByClassName("tier-zone");
    for (var i = 0; i < tiers.length; i++) {
        for (var j = 0; j < tiers[i].children.length; j++) {
            newMeta[tiers[i].id].push(tiers[i].children[j].id)
        }
    }
    return newMeta;
}

function dragStart(ev) { //drag
    //console.log(ev.target.id);
    ev.dataTransfer.setData("ID", ev.target.id);
    setTimeout(function(){ ev.target.classList.add("hidden"); }, 0);
}

function drop(ev) {
    ev.preventDefault();
    //console.log(ev.dataTransfer.getData("ID"));
    var data = ev.dataTransfer.getData("ID");
    if (ev.target.classList.contains("character")) {
        ev.target.parentNode.insertBefore(document.getElementById(data), ev.target);
        ev.target.classList.remove("hovered");
    } else if (ev.target.classList.contains("tier-zone")){
        ev.target.classList.remove("hovered");
        ev.target.appendChild(document.getElementById(data));
        ev.target.lastChild.classList.remove("unhovered");
        if (ev.target.childElementCount > 1) {
            ev.target.children[ev.target.childElementCount-2].classList.remove("unhovered");
        }
    }
    console.log(updateMeta());
    history.pushState(null, '', "/tierlist/"+encryptMeta(updateMeta()));
}
function dragEnd(ev) {
    ev.preventDefault();
    var data = ev.target.id; // ev.dataTransfer.getData("ID")
    document.getElementById(data).classList.remove("hidden");
}
function dragOver(ev) { //allowDrop
    ev.preventDefault();
    //console.log(ev.originalEvent.dataTransfer.types.includes("id")); make following code conditional on this upon moving to jQuery
    if (ev.target.classList.contains("character")) {
        ev.target.classList.add("hovered");
    } else if (ev.target.classList.contains("tier-zone")) {
        if (ev.target.childElementCount == 0) {
            ev.target.classList.add("hovered");
        } else {
            ev.target.lastChild.classList.add("unhovered");
        }
    }
}
function dragLeave(ev) { //allowDrop
    ev.preventDefault();
    if (ev.target.classList.contains("character")) {
        ev.target.classList.remove("hovered");
    } else if (ev.target.classList.contains("tier-zone")){
        if (ev.target.childElementCount == 0) {
            ev.target.classList.remove("hovered");
        } else {
            ev.target.lastChild.classList.remove("unhovered");
        }
    }
}

var characterElements = document.getElementsByClassName("character");
for (var i = 0; i < characterElements.length; i++) {
    characterElements[i].addEventListener("dragstart", dragStart);
}

for (var i = 0; i < document.getElementsByClassName("tier-zone").length; i++) {
    document.getElementsByClassName("tier-zone")[i].addEventListener("drop", drop);
    document.getElementsByClassName("tier-zone")[i].addEventListener("dragover", dragOver); //pure JavaScript equivalent of commented jQuery line below
    document.getElementsByClassName("tier-zone")[i].addEventListener("dragleave", dragLeave);
}
//$(".tier-zone").on("dragover", dragOver); move to jQuery to disallow non-".character" elements from triggering drag visual
document.body.addEventListener("dragend", dragEnd);

//place character in tier insertCharacter("Forest", "A")
function insertCharacter(character, tier) {
    if(characters.character.hasOwnProperty(character)){
        //document.getElementById(tier).innerHTML += '<div class="character" id="'+ character +'" title="'+ characters[character].name +'" draggable="true"><img src="/content/portraits/'+ characters[character].image +'" alt="'+ characters[character].name +'"></div>';
        var newChar = document.createElement("div");
        document.getElementById(tier).appendChild(newChar);
        newChar.classList.add("character");
        newChar.id = character;
        newChar.title = characters.character[character].name;
        newChar.draggable = 'true';
        newChar.innerHTML = '<img src="/content/portraits/'+ characters.character[character].image +'" alt="'+ characters.character[character].name +'">';
        newChar.addEventListener("dragstart", dragStart);
        //console.log(newChar);
    }
}
var meta = {
    "S": ["Zoe","HatGang","ProfessorGenius"],
    "A": ["DarkBday","Insignia"],
    "B": ["CaptainHat","Fatcat","Forest","Kiara","KidCat"],
    "C": ["Bday","Random"],
    "D": ["Cole","Gus","WashingMachine"],
    "E": ["Snapback"]
}

function insertMeta(json) {
    for (var i in json) {
        for (var j in json[i]) {
            //console.log(j);
            insertCharacter(json[i][j], i)
        }
    }
}

//
//insertCharacter("Zoe", "S")
//insertCharacter("Forest", "A")
//insertCharacter("Cole", "B")
var pathname = window.location.pathname.split("/");
var metacode = pathname[pathname.length-1];
if (pathname.length > 2 && metacode != "") {
    meta = decryptMeta(metacode);
}
insertMeta(meta);
/*
var node = document.getElementById('wrapper');
document.getElementById('list-wrapper').style.marginLeft = "27px"; //24+27
document.getElementById('list-wrapper').style.marginRight = "27px";
document.getElementById('wrapper').style.borderRightWidth = "15px";
document.getElementById('wrapper').style.borderLeftWidth = "15px";
html2canvas(document.querySelector("#wrapper")).then(canvas => {
    console.log(canvas);
    //document.body.appendChild(canvas)
    var img = document.createElement("img");
    img.src = canvas.toDataURL("image/png");
    document.body.appendChild(img)
    document.getElementById('list-wrapper').style.marginLeft = ""; //24+27
    document.getElementById('list-wrapper').style.marginRight = "";
    document.getElementById('wrapper').style.borderRightWidth = "";
    document.getElementById('wrapper').style.borderLeftWidth = "";
});
*/

</script>
